/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as ExploreRouteImport } from './routes/explore'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersIdIndexRouteImport } from './routes/users/$id/index'
import { Route as MemoryLanesIdIndexRouteImport } from './routes/memory-lanes/$id/index'
import { Route as MemoryLanesIdEditRouteImport } from './routes/memory-lanes/$id/edit'
import { Route as ApiFilesSplatRouteImport } from './routes/api/files/$'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'

const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const ExploreRoute = ExploreRouteImport.update({
  id: '/explore',
  path: '/explore',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIdIndexRoute = UsersIdIndexRouteImport.update({
  id: '/users/$id/',
  path: '/users/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const MemoryLanesIdIndexRoute = MemoryLanesIdIndexRouteImport.update({
  id: '/memory-lanes/$id/',
  path: '/memory-lanes/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const MemoryLanesIdEditRoute = MemoryLanesIdEditRouteImport.update({
  id: '/memory-lanes/$id/edit',
  path: '/memory-lanes/$id/edit',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiFilesSplatRoute = ApiFilesSplatRouteImport.update({
  id: '/api/files/$',
  path: '/api/files/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/explore': typeof ExploreRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/files/$': typeof ApiFilesSplatRoute
  '/memory-lanes/$id/edit': typeof MemoryLanesIdEditRoute
  '/memory-lanes/$id': typeof MemoryLanesIdIndexRoute
  '/users/$id': typeof UsersIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/explore': typeof ExploreRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/files/$': typeof ApiFilesSplatRoute
  '/memory-lanes/$id/edit': typeof MemoryLanesIdEditRoute
  '/memory-lanes/$id': typeof MemoryLanesIdIndexRoute
  '/users/$id': typeof UsersIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/explore': typeof ExploreRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/files/$': typeof ApiFilesSplatRoute
  '/memory-lanes/$id/edit': typeof MemoryLanesIdEditRoute
  '/memory-lanes/$id/': typeof MemoryLanesIdIndexRoute
  '/users/$id/': typeof UsersIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/explore'
    | '/sign-in'
    | '/sign-up'
    | '/api/auth/$'
    | '/api/files/$'
    | '/memory-lanes/$id/edit'
    | '/memory-lanes/$id'
    | '/users/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/explore'
    | '/sign-in'
    | '/sign-up'
    | '/api/auth/$'
    | '/api/files/$'
    | '/memory-lanes/$id/edit'
    | '/memory-lanes/$id'
    | '/users/$id'
  id:
    | '__root__'
    | '/'
    | '/explore'
    | '/sign-in'
    | '/sign-up'
    | '/api/auth/$'
    | '/api/files/$'
    | '/memory-lanes/$id/edit'
    | '/memory-lanes/$id/'
    | '/users/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ExploreRoute: typeof ExploreRoute
  SignInRoute: typeof SignInRoute
  SignUpRoute: typeof SignUpRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiFilesSplatRoute: typeof ApiFilesSplatRoute
  MemoryLanesIdEditRoute: typeof MemoryLanesIdEditRoute
  MemoryLanesIdIndexRoute: typeof MemoryLanesIdIndexRoute
  UsersIdIndexRoute: typeof UsersIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/explore': {
      id: '/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof ExploreRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/$id/': {
      id: '/users/$id/'
      path: '/users/$id'
      fullPath: '/users/$id'
      preLoaderRoute: typeof UsersIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/memory-lanes/$id/': {
      id: '/memory-lanes/$id/'
      path: '/memory-lanes/$id'
      fullPath: '/memory-lanes/$id'
      preLoaderRoute: typeof MemoryLanesIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/memory-lanes/$id/edit': {
      id: '/memory-lanes/$id/edit'
      path: '/memory-lanes/$id/edit'
      fullPath: '/memory-lanes/$id/edit'
      preLoaderRoute: typeof MemoryLanesIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/files/$': {
      id: '/api/files/$'
      path: '/api/files/$'
      fullPath: '/api/files/$'
      preLoaderRoute: typeof ApiFilesSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ExploreRoute: ExploreRoute,
  SignInRoute: SignInRoute,
  SignUpRoute: SignUpRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiFilesSplatRoute: ApiFilesSplatRoute,
  MemoryLanesIdEditRoute: MemoryLanesIdEditRoute,
  MemoryLanesIdIndexRoute: MemoryLanesIdIndexRoute,
  UsersIdIndexRoute: UsersIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
